@page
@model DashboardModel
@{
    ViewData["Title"] = "Dashboard de Ingresos en Tiempo Real";
}

<div class="row">
    <div class="col-12 text-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Dashboard de Ingresos en Tiempo Real</h1>
    </div>
</div>

<!-- Botón para limpiar el dashboard -->
<div style="text-align: center; margin-top: 10px; margin-bottom: 10px;">
    <span id="clearDashboard" style="cursor: pointer; color: #dc3545; font-size: 18px; text-decoration: underline;">Limpiar Dashboard</span>
</div>
<!-- Contenedor principal para el diseño -->
<div class="dashboard-container">
    <!-- Canvas para el gráfico -->
    <div class="chart-container">
        <canvas id="realtimeChart" width="400" height="200"></canvas>
    </div>

    <!-- Tabla para mostrar la información adicional -->
    <div class="table-container">
        <button id="exportVisitas" class="btn btn-primary" style="margin-bottom: 10px;">Exportar Visitas a CSV</button>
        <table id="visitasTable" class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Fecha y Hora</th>
                    <th>Estado</th>
                    <th>RUT</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>

        <button id="exportProhibidos" class="btn btn-primary" style="margin-bottom: 10px;">Exportar Prohibidos a CSV</button>
        <table id="prohibidosTable" class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Fecha y Hora</th>
                    <th>RUT</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Motivo</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<link rel="stylesheet" href="~/css/dashboard.css" />

@section Scripts {
    <!-- Incluir scripts necesarios -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const ctx = document.getElementById('realtimeChart').getContext('2d');
            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: JSON.parse(localStorage.getItem('chartLabels')) || [],
                    datasets: [{
                        label: 'Visitas',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgb(75, 192, 192)',
                        borderWidth: 1,
                        data: JSON.parse(localStorage.getItem('chartData')) || []
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Fecha y Hora'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Cantidad de Visitas'
                            },
                            beginAtZero: true
                        }
                    },
                    onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const elementIndex = elements[0].index;
                            const label = chart.data.labels[elementIndex];
                            const value = chart.data.datasets[0].data[elementIndex];
                            alert(`Fecha: ${label}\nCantidad de Visitas: ${value}`);
                        }
                    }
                }
            });

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("http://localhost:5278/dashboardHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connection.start()
                .then(() => {
                    console.log("Conexión a SignalR establecida");
                    document.getElementById('statusIndicator').textContent = 'Conectado';
                    document.getElementById('statusIndicator').classList.remove('disconnected');
                })
                .catch(err => {
                    console.error("Error en SignalR:", err.toString());
                    document.getElementById('statusIndicator').textContent = 'Desconectado';
                    document.getElementById('statusIndicator').classList.add('disconnected');
                });

            connection.on("ReceiveVisita", (message) => {
                const newData = JSON.parse(message);

                chart.data.labels.push(newData.fecha);
                chart.data.datasets[0].data.push(chart.data.datasets[0].data.length + 1);

                if (chart.data.labels.length > 10) {
                    chart.data.labels.shift();
                    chart.data.datasets[0].data.shift();
                }

                chart.update();

                localStorage.setItem('chartLabels', JSON.stringify(chart.data.labels));
                localStorage.setItem('chartData', JSON.stringify(chart.data.datasets[0].data));

                const tableBody = document.querySelector("#visitasTable tbody");
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${newData.fecha}</td>
                    <td>${newData.estado}</td>
                    <td>${newData.rut}</td>
                    <td>${newData.nombre}</td>
                    <td>${newData.apellido}</td>
                `;
                tableBody.appendChild(row);

                if (tableBody.rows.length > 10) {
                    tableBody.deleteRow(0);
                }

                const visitasData = JSON.parse(localStorage.getItem('visitasData')) || [];
                visitasData.push(newData);
                if (visitasData.length > 10) {
                    visitasData.shift();
                }
                localStorage.setItem('visitasData', JSON.stringify(visitasData));
            });

            const visitasData = JSON.parse(localStorage.getItem('visitasData')) || [];
            const tableBody = document.querySelector("#visitasTable tbody");
            visitasData.forEach(data => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${data.fecha}</td>
                    <td>${data.estado}</td>
                    <td>${data.rut}</td>
                    <td>${data.nombre}</td>
                    <td>${data.apellido}</td>
                `;
                tableBody.appendChild(row);
            });

            connection.on("ReceiveAccesoProhibido", (message) => {
                const newData = JSON.parse(message);
                const prohibitedBody = document.querySelector("#prohibidosTable tbody");
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${newData.fecha}</td>
                    <td>${newData.rut}</td>
                    <td>${newData.nombre}</td>
                    <td>${newData.apellido}</td>
                    <td>${newData.motivo}</td>
                `;
                prohibitedBody.appendChild(row);

                if (prohibitedBody.rows.length > 10) {
                    prohibitedBody.deleteRow(0);
                }

                const prohibidosData = JSON.parse(localStorage.getItem('prohibidosData')) || [];
                prohibidosData.push(newData);
                if (prohibidosData.length > 10) {
                    prohibidosData.shift();
                }
                localStorage.setItem('prohibidosData', JSON.stringify(prohibidosData));
            });

            const prohibidosData = JSON.parse(localStorage.getItem('prohibidosData')) || [];
            const prohibitedBody = document.querySelector("#prohibidosTable tbody");
            prohibidosData.forEach(data => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${data.fecha}</td>
                    <td>${data.rut}</td>
                    <td>${data.nombre}</td>
                    <td>${data.apellido}</td>
                    <td>${data.motivo}</td>
                `;
                prohibitedBody.appendChild(row);
            });

            document.getElementById('clearDashboard').addEventListener('click', function() {
                // Limpiar el gráfico
                chart.data.labels = [];
                chart.data.datasets[0].data = [];
                chart.update();

                // Limpiar las tablas
                document.querySelector("#visitasTable tbody").innerHTML = '';
                document.querySelector("#prohibidosTable tbody").innerHTML = '';

                // Limpiar localStorage
                localStorage.removeItem('chartLabels');
                localStorage.removeItem('chartData');
                localStorage.removeItem('visitasData');
                localStorage.removeItem('prohibidosData');
            });

            function exportTableToCSV(tableId, filename) {
                const table = document.getElementById(tableId);
                const rows = Array.from(table.querySelectorAll('tr'));
                const csvContent = rows.map(row => {
                    const cols = Array.from(row.querySelectorAll('th, td'));
                    return cols.map(col => col.innerText).join(',');
                }).join('\n');

                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.setAttribute('download', filename);
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }

            document.getElementById('exportVisitas').addEventListener('click', function() {
                exportTableToCSV('visitasTable', 'visitas.csv');
            });

            document.getElementById('exportProhibidos').addEventListener('click', function() {
                exportTableToCSV('prohibidosTable', 'prohibidos.csv');
            });

            $.noConflict();
            jQuery(document).ready(function($) {
                $('#visitasTable').DataTable({
                    "pageLength": 20,
                    "order": [[0, "desc"]],
                    "language": {
                        "lengthMenu": "Mostrar _MENU_ registros por página",
                        "zeroRecords": "No se encontraron resultados",
                        "info": "Mostrando página _PAGE_ de _PAGES_",
                        "infoEmpty": "No hay registros disponibles",
                        "infoFiltered": "(filtrado de _MAX_ registros totales)",
                        "search": "Buscar:",
                        "paginate": {
                            "first": "Primero",
                            "last": "Último",
                            "next": "Siguiente",
                            "previous": "Anterior"
                        }
                    }
                });

                $('#prohibidosTable').DataTable({
                    "pageLength": 20,
                    "order": [[0, "desc"]],
                    "language": {
                        "lengthMenu": "Mostrar _MENU_ registros por página",
                        "zeroRecords": "No se encontraron resultados",
                        "info": "Mostrando página _PAGE_ de _PAGES_",
                        "infoEmpty": "No hay registros disponibles",
                        "infoFiltered": "(filtrado de _MAX_ registros totales)",
                        "search": "Buscar:",
                        "paginate": {
                            "first": "Primero",
                            "last": "Último",
                            "next": "Siguiente",
                            "previous": "Anterior"
                        }
                    }
                });
            });
        });
    </script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap4.min.js"></script>
}
