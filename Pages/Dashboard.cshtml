@page
@model DashboardModel
@{
    ViewData["Title"] = "Dashboard de Ingresos en Tiempo Real";
}

<h1 class="text-center">Dashboard de Ingresos en Tiempo Real</h1>

<!-- Contenedor principal para el diseño -->
<div class="dashboard-container">
    <!-- Canvas para el gráfico -->
    <div class="chart-container">
        <canvas id="realtimeChart" width="400" height="200"></canvas>
    </div>

    <!-- Tabla para mostrar la información adicional -->
    <div class="table-container">
        <table id="visitasTable" class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Fecha y Hora</th>
                    <th>Estado</th>
                    <th>RUT</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>

        <!-- Tabla de intentos prohibidos -->
        <table id="prohibidosTable" class="table table-bordered mt-3">
            <thead class="thead-dark">
                <tr>
                    <th>Fecha y Hora</th>
                    <th>RUT</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Motivo</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

@section Styles {
    <style>
        body {
            margin: 0; /* Quita los márgenes globales del cuerpo */
            padding: 0;
        }

        .dashboard-container {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 20px;
            margin: 20px 0; /* Solo margen superior e inferior */
        }

        .chart-container {
            flex: 1; /* 1/3 del ancho */
        }

        .table-container {
            flex: 2; /* 2/3 del ancho */
            max-height: 600px; /* Limita la altura de la tabla para evitar desbordamiento */
            overflow-y: auto; /* Añade scroll si es necesario */
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th, .table td {
            padding: 10px;
            text-align: left;
        }

        .table thead {
            background-color: #343a40;
            color: white;
            font-weight: bold;
        }

        .table tbody tr:nth-child(odd) {
            background-color: #f2f2f2; /* Gris claro para filas impares */
        }

        .table tbody tr:nth-child(even) {
            background-color: #ffffff; /* Blanco para filas pares */
        }

        .table tbody tr:hover {
            background-color: #f1f1f1; /* Color de fondo al pasar el ratón */
        }

        .table th {
            text-align: center;
        }

        .table td {
            text-align: center;
        }
    </style>
}

@section Scripts {
    <!-- Incluir scripts necesarios -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Configuración del contexto del gráfico de Chart.js
            const ctx = document.getElementById('realtimeChart').getContext('2d');

            // Inicialización del gráfico de líneas
            const chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [], // Etiquetas en el eje X (vacío inicialmente)
                    datasets: [{
                        label: 'Visitas',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgb(75, 192, 192)',
                        borderWidth: 1,
                        data: [] // Datos iniciales vacíos
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Fecha y Hora' // Título del eje X
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Cantidad de Visitas' // Título del eje Y
                            },
                            beginAtZero: true
                        }
                    }
                }
            });

            // Configuración de la conexión SignalR
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("http://localhost:5278/dashboardHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Iniciar la conexión con SignalR
            connection.start()
                .then(() => console.log("Conexión a SignalR establecida"))
                .catch(err => console.error("Error en SignalR:", err.toString()));

            // Manejador para la recepción de visitas permitidas
            connection.on("ReceiveVisita", (message) => {
                const newData = JSON.parse(message);

                // Actualizar el gráfico con nuevos datos
                chart.data.labels.push(newData.fecha); // Añadir la fecha al eje X
                chart.data.datasets[0].data.push(chart.data.datasets[0].data.length + 1); // Contador de visitas

                // Limitar a 10 puntos para evitar desbordamiento en el gráfico
                if (chart.data.labels.length > 10) {
                    chart.data.labels.shift();
                    chart.data.datasets[0].data.shift();
                }

                chart.update(); // Actualizar el gráfico

                // Actualizar la tabla de visitas permitidas
                const tableBody = document.querySelector("#visitasTable tbody");
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${newData.fecha}</td>
                    <td>${newData.estado}</td>
                    <td>${newData.rut}</td>
                    <td>${newData.nombre}</td>
                    <td>${newData.apellido}</td>
                `;
                tableBody.appendChild(row);

                // Limitar las filas de la tabla a 10
                if (tableBody.rows.length > 10) {
                    tableBody.deleteRow(0);
                }
            });

            // Manejador para la recepción de intentos de acceso prohibidos
            connection.on("ReceiveAccesoProhibido", (message) => {
                const newData = JSON.parse(message);

                // Actualizar la tabla de intentos prohibidos
                const prohibitedBody = document.querySelector("#prohibidosTable tbody");
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${newData.fecha}</td>
                    <td>${newData.rut}</td>
                    <td>${newData.nombre}</td>
                    <td>${newData.apellido}</td>
                    <td>${newData.motivo}</td>
                `;
                prohibitedBody.appendChild(row);

                // Limitar las filas de la tabla a 10
                if (prohibitedBody.rows.length > 10) {
                    prohibitedBody.deleteRow(0);
                }
            });
        });
    </script>
}
