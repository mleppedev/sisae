@page
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrador, Encargado")]
@model sisae.Pages.Visitas.CreateModel
@{
    ViewData["Title"] = "Registrar Visita";
}

<div class="row">
    <div class="col-12 text-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Registrar Visita</h1>
    </div>
</div>

<div class="container mt-5">
    <!-- Mostrar alertas solo si hay errores -->
    @if (ModelState.ErrorCount > 0)
    {
        <div asp-validation-summary="All" class="alert alert-danger text-center" role="alert"></div>
    }

    <form id="visitaForm" method="post" class="row g-3">
        <div class="col-md-6">
            <!-- Campo para ingresar el RUT del visitante -->
            <div class="form-group">
                <label for="rutInput" class="form-label">RUT del Visitante</label>
                <input type="text" id="rutInput" class="form-control" placeholder="Ej: 12.345.678-9" />
                <button type="button" id="checkRut" class="btn btn-secondary mt-2">Verificar RUT</button>
                <div id="rutMessage" class="text-danger mt-2"></div>
            </div>

            <!-- Lista desplegable de visitantes -->
            <div class="form-group">
                <label asp-for="Visita.ID_Visitante" class="form-label">Visitante</label>
                <select asp-for="Visita.ID_Visitante" class="form-control" asp-items="Model.VisitantesSelectList" disabled></select>
                <span asp-validation-for="Visita.ID_Visitante" class="text-danger"></span>
            </div>

            <!-- Lista desplegable de visitados -->
            <div class="form-group mt-3">
                <label asp-for="Visita.ID_Visitado" class="form-label">Visitado</label>
                <select asp-for="Visita.ID_Visitado" class="form-control" asp-items="Model.VisitadosSelectList"></select>
                <span asp-validation-for="Visita.ID_Visitado" class="text-danger"></span>
            </div>

            <!-- Motivo de la visita -->
            <div class="form-group mt-3">
                <label asp-for="Visita.Motivo_Visita" class="form-label">Motivo de la Visita</label>
                <input asp-for="Visita.Motivo_Visita" class="form-control" />
                <span asp-validation-for="Visita.Motivo_Visita" class="text-danger"></span>
            </div>

            <!-- Comentarios adicionales -->
            <div class="form-group mt-3">
                <label asp-for="Visita.Comentarios" class="form-label">Comentarios</label>
                <textarea asp-for="Visita.Comentarios" class="form-control"></textarea>
                <span asp-validation-for="Visita.Comentarios" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-6">
            <!-- Fecha de la visita -->
            <div class="form-group mt-3">
                <label asp-for="Visita.Fecha_Visita" class="form-label">Fecha de Visita</label>
                <input asp-for="Visita.Fecha_Visita" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" />
                <span asp-validation-for="Visita.Fecha_Visita" class="text-danger"></span>
            </div>

            <!-- Hora de entrada -->
            <div class="form-group mt-3">
                <label asp-for="Visita.Hora_Entrada" class="form-label">Hora de Entrada</label>
                <input asp-for="Visita.Hora_Entrada" class="form-control" value="@DateTime.Now.ToString("HH:mm")" />
                <span asp-validation-for="Visita.Hora_Entrada" class="text-danger"></span>
            </div>

            <!-- Hora de salida opcional -->
            <div class="form-group mt-3">
                <label asp-for="Visita.Hora_Salida" class="form-label">Hora de Salida (Opcional)</label>
                <input asp-for="Visita.Hora_Salida" class="form-control" />
                <span asp-validation-for="Visita.Hora_Salida" class="text-danger"></span>
            </div>

            <!-- Estado de la visita -->
            <div class="form-group mt-3">
                <label asp-for="Visita.Estado" class="form-label">Estado de la Visita</label>
                <select asp-for="Visita.Estado" class="form-control">
                    <option value="Activa">Activa</option>
                    <option value="Completada">Completada</option>
                    <option value="Cancelada">Cancelada</option>
                </select>
                <span asp-validation-for="Visita.Estado" class="text-danger"></span>
            </div>
        </div>

        <!-- Botones para registrar o cancelar -->
        <div class="col-12 text-center mt-5">
            <button type="submit" class="btn btn-primary">Registrar Visita</button>
            <button type="button" id="nuevoRegistro" class="btn btn-warning ms-2">Nuevo</button>
            <a asp-page="./Index" class="btn btn-secondary ms-2">Cancelar</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.getElementById('nuevoRegistro').addEventListener('click', function () {
            console.log('Botón Nuevo presionado');
            const form = document.getElementById('visitaForm');
            form.reset(); // Reinicia los valores del formulario

            // Reiniciar los selects a "Seleccione..."
            document.querySelector('select[name="Visita.ID_Visitante"]').value = "";
            document.querySelector('select[name="Visita.ID_Visitado"]').value = "";
            document.querySelector('select[name="Visita.Motivo_Visita"]').value = "";
            document.querySelector('select[name="Visita.Comentarios"]').value = "";
            console.log('Formulario reiniciado');

            // Limpiar mensajes de validación
            document.querySelectorAll('.text-danger').forEach(span => span.innerText = "");
            document.getElementById('rutMessage').innerText = "";
            console.log('Mensajes de validación limpiados');
        });
    </script>

    <script>
        let visitanteId = null; // Variable para almacenar el ID del visitante

        document.getElementById('checkRut').addEventListener('click', async function () {
            console.log('Verificación de RUT iniciada');
            const rutInputElement = document.getElementById('rutInput');
            let rutInput = rutInputElement.value.trim();

            if (validarRut(rutInput)) {
                console.log('RUT válido');
                const rutFormateado = formatearRut(rutInput);
                rutInputElement.value = rutFormateado; // Mostrar el RUT formateado

                try {
                    const response = await fetch(`?handler=VerifyRut&rut=${encodeURIComponent(rutFormateado)}`, { method: 'GET' });

                    if (response.ok) {
                        const data = await response.json();
                        console.log('Visitante encontrado:', data);

                        visitanteId = data.idVisitante; // Almacenar el ID del visitante
                        console.log('Visitante ID almacenado:', visitanteId);

                        const message = document.getElementById('rutMessage');
                        message.innerText = 'Visitante encontrado y seleccionado.';
                        message.classList.remove('text-danger');
                        message.classList.add('mensaje-positivo');

                        const visitanteSelect = document.querySelector('select[name="Visita.ID_Visitante"]');
                        if (visitanteSelect) {
                            visitanteSelect.innerHTML = `<option value="${data.idVisitante}">${data.nombreVisitante}</option>`;
                            console.log('Dropdown actualizado con el visitante:', data.nombreVisitante);
                        }
                    } else if (response.status === 404) {
                        console.log('Visitante no encontrado, redirigiendo a creación');
                        window.location.href = `/Visitantes/Create?rut=${encodeURIComponent(rutFormateado)}&returnUrl=${encodeURIComponent(window.location.pathname)}`;
                    }
                } catch (error) {
                    console.error('Hubo un problema al verificar el RUT:', error);
                }
            } else {
                console.log('RUT no válido');
                alert("El RUT ingresado no es válido.");
            }
        });

        document.getElementById('visitaForm').addEventListener('submit', function (event) {
            if (visitanteId) {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'Visita.ID_Visitante';
                input.value = visitanteId;
                this.appendChild(input);
                console.log('ID del visitante añadido al formulario:', visitanteId);
            }

            // Actualizar y seleccionar el visitante en el dropdown
            const visitanteSelect = document.querySelector('select[name="Visita.ID_Visitante"]');
            if (visitanteSelect) {
                visitanteSelect.innerHTML = `<option value="${visitanteId}">${rutInputElement.value}</option>`;
                visitanteSelect.value = visitanteId;
                console.log('Dropdown actualizado y visitante seleccionado:', rutInputElement.value);
            }
        });

        // Función para validar el formato del RUT
        function validarRut(rutCompleto) {
            // Normalizar eliminando puntos y guiones
            let rut = rutCompleto.replace(/[.\-]/g, '').toUpperCase();

            // Validar carácter del RUT
            if (!/^[0-9]+[0-9K]$/.test(rut)) return false;

            const cuerpo = rut.slice(0, -1);
            const dv = rut.slice(-1);

            // Algoritmo de validación del RUT
            let suma = 0;
            let multiplo = 2;
            
            for (let i = cuerpo.length - 1; i >= 0; i--) {
                suma += parseInt(cuerpo.charAt(i)) * multiplo;
                multiplo = multiplo < 7 ? multiplo + 1 : 2;
            }

            const resto = 11 - (suma % 11);
            const dvCalculado = resto === 11 ? '0' : resto === 10 ? 'K' : resto.toString();

            // Si no es válido, retorna falso
            if (dvCalculado !== dv) return false;

            // Formatear RUT correctamente
            return formatearRut(cuerpo + dv);
        }

        function formatearRut(rut) {
            // Verificar si el RUT ya contiene un guion
            if (rut.includes("-")) {
                // Separar el cuerpo y el dígito verificador si ya tiene el guion
                let [cuerpo, dv] = rut.split("-");
                
                // Formatear el cuerpo agregando puntos
                cuerpo = cuerpo.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
                
                return `${cuerpo}-${dv}`;
            } else {
                // Si no tiene guion, separarlo normalmente
                let cuerpo = rut.slice(0, -1);
                let dv = rut.slice(-1);
                
                // Formatear el cuerpo agregando puntos
                cuerpo = cuerpo.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
                
                return `${cuerpo}-${dv}`;
            }
        }
    </script>

    <script>
        // Simular la entrada del RUT y presionar 'Verificar RUT' al cargar la página
        window.addEventListener('load', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const rutParam = urlParams.get('rut');
            if (rutParam) {
                const rutInputElement = document.getElementById('rutInput');
                rutInputElement.value = rutParam;
                document.getElementById('checkRut').click();
            }
        });
    </script>
}

<style>
    .mensaje-positivo {
        color: green;
    }
</style>
