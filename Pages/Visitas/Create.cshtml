@page
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Administrador, Encargado")]
@model sisae.Pages.Visitas.CreateModel
@{
    ViewData["Title"] = "Registrar Visita";
}

<div class="container-fluid mt-5">
    <div class="row">
        <div class="col-12 text-center pt-3 pb-2 mb-3 border-bottom">
            <h1 class="h2">Registrar Visita</h1>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- Mostrar alertas solo si hay errores -->
            @if (ModelState.ErrorCount > 0)
            {
                <div asp-validation-summary="All" class="alert alert-danger text-center" role="alert"></div>
            }

            <form id="visitaForm" method="post" class="p-4 border rounded bg-light">
                <div class="form-floating mb-3">
                    <input type="text" id="rutInput" class="form-control" placeholder="Ej: 12.345.678-9" />
                    <label for="rutInput">RUT del Visitante</label>
                    <button type="button" id="checkRut" class="btn btn-secondary mt-2">Verificar RUT</button>
                    <div id="rutMessage" class="text-danger mt-2"></div>
                </div>

                <div class="form-floating mb-3">
                    <select asp-for="Visita.ID_Visitante" class="form-control" asp-items="Model.VisitantesSelectList" disabled></select>
                    <label asp-for="Visita.ID_Visitante">Visitante</label>
                    <span asp-validation-for="Visita.ID_Visitante" class="text-danger"></span>
                </div>

                <div class="form-floating mb-3">
                    <select asp-for="Visita.ID_Visitado" class="form-control" asp-items="Model.VisitadosSelectList"></select>
                    <label asp-for="Visita.ID_Visitado">Visitado</label>
                    <span asp-validation-for="Visita.ID_Visitado" class="text-danger"></span>
                </div>

                <div class="form-floating mb-3">
                    <input asp-for="Visita.Motivo_Visita" class="form-control" />
                    <label asp-for="Visita.Motivo_Visita">Motivo de la Visita</label>
                    <span asp-validation-for="Visita.Motivo_Visita" class="text-danger"></span>
                </div>

                <div class="form-floating mb-3">
                    <textarea asp-for="Visita.Comentarios" class="form-control"></textarea>
                    <label asp-for="Visita.Comentarios">Comentarios</label>
                    <span asp-validation-for="Visita.Comentarios" class="text-danger"></span>
                </div>

                <div class="form-floating mb-3">
                    <input asp-for="Visita.Fecha_Visita" class="form-control" />
                    <label asp-for="Visita.Fecha_Visita">Fecha de Visita</label>
                    <span asp-validation-for="Visita.Fecha_Visita" class="text-danger"></span>
                </div>

                <div class="form-floating mb-3">
                    <input asp-for="Visita.Hora_Entrada" class="form-control" />
                    <label asp-for="Visita.Hora_Entrada">Hora de Entrada</label>
                    <span asp-validation-for="Visita.Hora_Entrada" class="text-danger"></span>
                </div>

                <div class="form-floating mb-3">
                    <input asp-for="Visita.Hora_Salida" class="form-control" />
                    <label asp-for="Visita.Hora_Salida">Hora de Salida (Opcional)</label>
                    <span asp-validation-for="Visita.Hora_Salida" class="text-danger"></span>
                </div>

                <div class="form-floating mb-3">
                    <select asp-for="Visita.Estado" class="form-control">
                        <option value="Activa">Activa</option>
                        <option value="Completada">Completada</option>
                        <option value="Cancelada">Cancelada</option>
                    </select>
                    <label asp-for="Visita.Estado">Estado de la Visita</label>
                    <span asp-validation-for="Visita.Estado" class="text-danger"></span>
                </div>

                <div class="d-flex justify-content-center mt-5">
                    <button type="submit" class="btn btn-primary me-2">Registrar Visita</button>
                    <button type="button" id="nuevoRegistro" class="btn btn-warning me-2">Nuevo</button>
                    <a asp-page="./Index" class="btn btn-secondary">Cancelar</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('nuevoRegistro').addEventListener('click', function () {
            console.log('Botón Nuevo presionado');
            const form = document.getElementById('visitaForm');
            form.reset(); // Reinicia los valores del formulario

            // Reiniciar los selects a "Seleccione..."
            document.querySelector('select[name="Visita.ID_Visitante"]').value = "";
            document.querySelector('select[name="Visita.ID_Visitado"]').value = "";
            document.querySelector('select[name="Visita.Motivo_Visita"]').value = "";
            document.querySelector('select[name="Visita.Comentarios"]').value = "";
            console.log('Formulario reiniciado');

            // Limpiar mensajes de validación
            document.querySelectorAll('.text-danger').forEach(span => span.innerText = "");
            document.getElementById('rutMessage').innerText = "";
            console.log('Mensajes de validación limpiados');
        });
    </script>

    <script>
        let visitanteId = null; // Variable para almacenar el ID del visitante

        document.getElementById('checkRut').addEventListener('click', async function () {
            console.log('Verificación de RUT iniciada');
            const rutInputElement = document.getElementById('rutInput');
            let rutInput = rutInputElement.value.trim();

            if (validarRut(rutInput)) {
                console.log('RUT válido');
                const rutFormateado = formatearRut(rutInput);
                rutInputElement.value = rutFormateado; // Mostrar el RUT formateado

                try {
                    const response = await fetch(`?handler=VerifyRut&rut=${encodeURIComponent(rutFormateado)}`, { method: 'GET' });

                    if (response.ok) {
                        const data = await response.json();
                        console.log('Visitante encontrado:', data);

                        visitanteId = data.idVisitante; // Almacenar el ID del visitante
                        console.log('Visitante ID almacenado:', visitanteId);

                        const message = document.getElementById('rutMessage');
                        message.innerText = 'Visitante encontrado y seleccionado.';
                        message.classList.remove('text-danger');
                        message.classList.add('mensaje-positivo');

                        const visitanteSelect = document.querySelector('select[name="Visita.ID_Visitante"]');
                        if (visitanteSelect) {
                            visitanteSelect.innerHTML = `<option value="${data.idVisitante}">${data.nombreVisitante}</option>`;
                            console.log('Dropdown actualizado con el visitante:', data.nombreVisitante);
                        }
                    } else if (response.status === 404) {
                        console.log('Visitante no encontrado, redirigiendo a creación');
                        window.location.href = `/Visitantes/Create?rut=${encodeURIComponent(rutFormateado)}&returnUrl=${encodeURIComponent(window.location.pathname)}`;
                    }
                } catch (error) {
                    console.error('Hubo un problema al verificar el RUT:', error);
                }
            } else {
                console.log('RUT no válido');
                alert("El RUT ingresado no es válido.");
            }
        });

        document.getElementById('visitaForm').addEventListener('submit', function (event) {
            if (visitanteId) {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'Visita.ID_Visitante';
                input.value = visitanteId;
                this.appendChild(input);
                console.log('ID del visitante añadido al formulario:', visitanteId);
            }

            // Actualizar y seleccionar el visitante en el dropdown
            const visitanteSelect = document.querySelector('select[name="Visita.ID_Visitante"]');
            if (visitanteSelect) {
                visitanteSelect.innerHTML = `<option value="${visitanteId}">${rutInputElement.value}</option>`;
                visitanteSelect.value = visitanteId;
                console.log('Dropdown actualizado y visitante seleccionado:', rutInputElement.value);
            }
        });

        // Función para validar el formato del RUT
        function validarRut(rutCompleto) {
            // Normalizar eliminando puntos y guiones
            let rut = rutCompleto.replace(/[.\-]/g, '').toUpperCase();

            // Validar carácter del RUT
            if (!/^[0-9]+[0-9K]$/.test(rut)) return false;

            const cuerpo = rut.slice(0, -1);
            const dv = rut.slice(-1);

            // Algoritmo de validación del RUT
            let suma = 0;
            let multiplo = 2;
            
            for (let i = cuerpo.length - 1; i >= 0; i--) {
                suma += parseInt(cuerpo.charAt(i)) * multiplo;
                multiplo = multiplo < 7 ? multiplo + 1 : 2;
            }

            const resto = 11 - (suma % 11);
            const dvCalculado = resto === 11 ? '0' : resto === 10 ? 'K' : resto.toString();

            // Si no es válido, retorna falso
            if (dvCalculado !== dv) return false;

            // Formatear RUT correctamente
            return formatearRut(cuerpo + dv);
        }

        function formatearRut(rut) {
            // Verificar si el RUT ya contiene un guion
            if (rut.includes("-")) {
                // Separar el cuerpo y el dígito verificador si ya tiene el guion
                let [cuerpo, dv] = rut.split("-");
                
                // Formatear el cuerpo agregando puntos
                cuerpo = cuerpo.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
                
                return `${cuerpo}-${dv}`;
            } else {
                // Si no tiene guion, separarlo normalmente
                let cuerpo = rut.slice(0, -1);
                let dv = rut.slice(-1);
                
                // Formatear el cuerpo agregando puntos
                cuerpo = cuerpo.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
                
                return `${cuerpo}-${dv}`;
            }
        }
    </script>

    <script>
        // Simular la entrada del RUT y presionar 'Verificar RUT' al cargar la página
        window.addEventListener('load', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const rutParam = urlParams.get('rut');
            if (rutParam) {
                const rutInputElement = document.getElementById('rutInput');
                rutInputElement.value = rutParam;
                document.getElementById('checkRut').click();
            }
        });
    </script>
}

<style>
    .mensaje-positivo {
        color: green;
    }
    .form-floating label {
        color: #6c757d;
    }
    .form-floating input:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }
    .btn-primary:hover {
        background-color: #0056b3;
        border-color: #004085;
    }
</style>
